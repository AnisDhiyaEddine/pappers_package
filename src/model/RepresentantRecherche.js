/**
 * Pappers API
 * L'API de Pappers vous permet de récupérer des informations et documents sur les entreprises françaises à partir de leur numéro SIREN ou SIRET.  Vous devez indiquer votre clé d'API dans les requêtes, en utilisant le paramètre `api_token`.  L'URL d'accès à l'API est https://api.pappers.fr/v2/  Lien vers la documentation de la V1 : https://www.pappers.fr/api/documentation/v1  L'historique des modifications (changelog) est accessible à l'url suivante : https://www.pappers.fr/api/changelog 
 *
 * The version of the OpenAPI document: 2.3.0
 * Contact: support@pappers.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Representant from './Representant';
import RepresentantRechercheAllOf from './RepresentantRechercheAllOf';

/**
 * The RepresentantRecherche model module.
 * @module model/RepresentantRecherche
 * @version 2.3.0
 */
class RepresentantRecherche {
    /**
     * Constructs a new <code>RepresentantRecherche</code>.
     * @alias module:model/RepresentantRecherche
     * @implements module:model/Representant
     * @implements module:model/RepresentantRechercheAllOf
     */
    constructor() { 
        Representant.initialize(this);RepresentantRechercheAllOf.initialize(this);
        RepresentantRecherche.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RepresentantRecherche</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RepresentantRecherche} obj Optional instance to populate.
     * @return {module:model/RepresentantRecherche} The populated <code>RepresentantRecherche</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RepresentantRecherche();
            Representant.constructFromObject(data, obj);
            RepresentantRechercheAllOf.constructFromObject(data, obj);

            if (data.hasOwnProperty('qualite')) {
                obj['qualite'] = ApiClient.convertToType(data['qualite'], 'String');
            }
            if (data.hasOwnProperty('personne_morale')) {
                obj['personne_morale'] = ApiClient.convertToType(data['personne_morale'], 'Boolean');
            }
            if (data.hasOwnProperty('date_prise_de_poste')) {
                obj['date_prise_de_poste'] = ApiClient.convertToType(data['date_prise_de_poste'], 'String');
            }
            if (data.hasOwnProperty('nom')) {
                obj['nom'] = ApiClient.convertToType(data['nom'], 'String');
            }
            if (data.hasOwnProperty('prenom')) {
                obj['prenom'] = ApiClient.convertToType(data['prenom'], 'String');
            }
            if (data.hasOwnProperty('nom_complet')) {
                obj['nom_complet'] = ApiClient.convertToType(data['nom_complet'], 'String');
            }
            if (data.hasOwnProperty('date_de_naissance')) {
                obj['date_de_naissance'] = ApiClient.convertToType(data['date_de_naissance'], 'String');
            }
            if (data.hasOwnProperty('date_de_naissance_formate')) {
                obj['date_de_naissance_formate'] = ApiClient.convertToType(data['date_de_naissance_formate'], 'String');
            }
            if (data.hasOwnProperty('age')) {
                obj['age'] = ApiClient.convertToType(data['age'], 'Number');
            }
            if (data.hasOwnProperty('nationalite')) {
                obj['nationalite'] = ApiClient.convertToType(data['nationalite'], 'String');
            }
            if (data.hasOwnProperty('code_nationalite')) {
                obj['code_nationalite'] = ApiClient.convertToType(data['code_nationalite'], 'String');
            }
            if (data.hasOwnProperty('ville_de_naissance')) {
                obj['ville_de_naissance'] = ApiClient.convertToType(data['ville_de_naissance'], 'String');
            }
            if (data.hasOwnProperty('pays_de_naissance')) {
                obj['pays_de_naissance'] = ApiClient.convertToType(data['pays_de_naissance'], 'String');
            }
            if (data.hasOwnProperty('code_pays_de_naissance')) {
                obj['code_pays_de_naissance'] = ApiClient.convertToType(data['code_pays_de_naissance'], 'String');
            }
            if (data.hasOwnProperty('adresse_ligne_1')) {
                obj['adresse_ligne_1'] = ApiClient.convertToType(data['adresse_ligne_1'], 'String');
            }
            if (data.hasOwnProperty('adresse_ligne_2')) {
                obj['adresse_ligne_2'] = ApiClient.convertToType(data['adresse_ligne_2'], 'String');
            }
            if (data.hasOwnProperty('adresse_ligne_3')) {
                obj['adresse_ligne_3'] = ApiClient.convertToType(data['adresse_ligne_3'], 'String');
            }
            if (data.hasOwnProperty('code_postal')) {
                obj['code_postal'] = ApiClient.convertToType(data['code_postal'], 'String');
            }
            if (data.hasOwnProperty('ville')) {
                obj['ville'] = ApiClient.convertToType(data['ville'], 'String');
            }
            if (data.hasOwnProperty('pays')) {
                obj['pays'] = ApiClient.convertToType(data['pays'], 'String');
            }
            if (data.hasOwnProperty('code_pays')) {
                obj['code_pays'] = ApiClient.convertToType(data['code_pays'], 'String');
            }
            if (data.hasOwnProperty('actuel')) {
                obj['actuel'] = ApiClient.convertToType(data['actuel'], 'Boolean');
            }
            if (data.hasOwnProperty('date_depart_de_poste')) {
                obj['date_depart_de_poste'] = ApiClient.convertToType(data['date_depart_de_poste'], 'String');
            }
            if (data.hasOwnProperty('forme_juridique')) {
                obj['forme_juridique'] = ApiClient.convertToType(data['forme_juridique'], 'String');
            }
        }
        return obj;
    }


}

/**
 * Qualité du représentant.
 * @member {String} qualite
 */
RepresentantRecherche.prototype['qualite'] = undefined;

/**
 * Vrai si le représentant est une personne morale, faux si personne physique.
 * @member {Boolean} personne_morale
 */
RepresentantRecherche.prototype['personne_morale'] = undefined;

/**
 * Date de prise de poste du représentant.
 * @member {String} date_prise_de_poste
 */
RepresentantRecherche.prototype['date_prise_de_poste'] = undefined;

/**
 * Nom du représentant.
 * @member {String} nom
 */
RepresentantRecherche.prototype['nom'] = undefined;

/**
 * Prénom du représentant.
 * @member {String} prenom
 */
RepresentantRecherche.prototype['prenom'] = undefined;

/**
 * Nom complet du représentant.
 * @member {String} nom_complet
 */
RepresentantRecherche.prototype['nom_complet'] = undefined;

/**
 * Date de naissance du représentant.
 * @member {String} date_de_naissance
 */
RepresentantRecherche.prototype['date_de_naissance'] = undefined;

/**
 * Date de naissance formatée du représentant.
 * @member {String} date_de_naissance_formate
 */
RepresentantRecherche.prototype['date_de_naissance_formate'] = undefined;

/**
 * Age du représentant.
 * @member {Number} age
 */
RepresentantRecherche.prototype['age'] = undefined;

/**
 * Nationalité du représentant.
 * @member {String} nationalite
 */
RepresentantRecherche.prototype['nationalite'] = undefined;

/**
 * Code nationalité du représentant
 * @member {String} code_nationalite
 */
RepresentantRecherche.prototype['code_nationalite'] = undefined;

/**
 * Ville de naissance du représentant.
 * @member {String} ville_de_naissance
 */
RepresentantRecherche.prototype['ville_de_naissance'] = undefined;

/**
 * Pays de naissance du représentant.
 * @member {String} pays_de_naissance
 */
RepresentantRecherche.prototype['pays_de_naissance'] = undefined;

/**
 * Code du pays de naissance du représentant.
 * @member {String} code_pays_de_naissance
 */
RepresentantRecherche.prototype['code_pays_de_naissance'] = undefined;

/**
 * Première ligne de l'adresse du représentant.
 * @member {String} adresse_ligne_1
 */
RepresentantRecherche.prototype['adresse_ligne_1'] = undefined;

/**
 * Deuxième ligne de l'adresse du représentant.
 * @member {String} adresse_ligne_2
 */
RepresentantRecherche.prototype['adresse_ligne_2'] = undefined;

/**
 * Troisième ligne de l'adresse du représentant.
 * @member {String} adresse_ligne_3
 */
RepresentantRecherche.prototype['adresse_ligne_3'] = undefined;

/**
 * Code postal du représentant.
 * @member {String} code_postal
 */
RepresentantRecherche.prototype['code_postal'] = undefined;

/**
 * Ville du représentant.
 * @member {String} ville
 */
RepresentantRecherche.prototype['ville'] = undefined;

/**
 * Pays du représentant.
 * @member {String} pays
 */
RepresentantRecherche.prototype['pays'] = undefined;

/**
 * Code du pays du représentant
 * @member {String} code_pays
 */
RepresentantRecherche.prototype['code_pays'] = undefined;

/**
 * Vaut vrai si le représentant est toujours à son poste.
 * @member {Boolean} actuel
 */
RepresentantRecherche.prototype['actuel'] = undefined;

/**
 * Date de départ de poste dans le cas où le représentant n'est plus un représentant actuel, au format AAAA-MM-JJ.
 * @member {String} date_depart_de_poste
 */
RepresentantRecherche.prototype['date_depart_de_poste'] = undefined;

/**
 * Forme juridique du représentant dans le cas d'une personne morale.
 * @member {String} forme_juridique
 */
RepresentantRecherche.prototype['forme_juridique'] = undefined;


// Implement Representant interface:
/**
 * Qualité du représentant.
 * @member {String} qualite
 */
Representant.prototype['qualite'] = undefined;
/**
 * Vrai si le représentant est une personne morale, faux si personne physique.
 * @member {Boolean} personne_morale
 */
Representant.prototype['personne_morale'] = undefined;
/**
 * Date de prise de poste du représentant.
 * @member {String} date_prise_de_poste
 */
Representant.prototype['date_prise_de_poste'] = undefined;
/**
 * Nom du représentant.
 * @member {String} nom
 */
Representant.prototype['nom'] = undefined;
/**
 * Prénom du représentant.
 * @member {String} prenom
 */
Representant.prototype['prenom'] = undefined;
/**
 * Nom complet du représentant.
 * @member {String} nom_complet
 */
Representant.prototype['nom_complet'] = undefined;
/**
 * Date de naissance du représentant.
 * @member {String} date_de_naissance
 */
Representant.prototype['date_de_naissance'] = undefined;
/**
 * Date de naissance formatée du représentant.
 * @member {String} date_de_naissance_formate
 */
Representant.prototype['date_de_naissance_formate'] = undefined;
/**
 * Age du représentant.
 * @member {Number} age
 */
Representant.prototype['age'] = undefined;
/**
 * Nationalité du représentant.
 * @member {String} nationalite
 */
Representant.prototype['nationalite'] = undefined;
/**
 * Code nationalité du représentant
 * @member {String} code_nationalite
 */
Representant.prototype['code_nationalite'] = undefined;
/**
 * Ville de naissance du représentant.
 * @member {String} ville_de_naissance
 */
Representant.prototype['ville_de_naissance'] = undefined;
/**
 * Pays de naissance du représentant.
 * @member {String} pays_de_naissance
 */
Representant.prototype['pays_de_naissance'] = undefined;
/**
 * Code du pays de naissance du représentant.
 * @member {String} code_pays_de_naissance
 */
Representant.prototype['code_pays_de_naissance'] = undefined;
/**
 * Première ligne de l'adresse du représentant.
 * @member {String} adresse_ligne_1
 */
Representant.prototype['adresse_ligne_1'] = undefined;
/**
 * Deuxième ligne de l'adresse du représentant.
 * @member {String} adresse_ligne_2
 */
Representant.prototype['adresse_ligne_2'] = undefined;
/**
 * Troisième ligne de l'adresse du représentant.
 * @member {String} adresse_ligne_3
 */
Representant.prototype['adresse_ligne_3'] = undefined;
/**
 * Code postal du représentant.
 * @member {String} code_postal
 */
Representant.prototype['code_postal'] = undefined;
/**
 * Ville du représentant.
 * @member {String} ville
 */
Representant.prototype['ville'] = undefined;
/**
 * Pays du représentant.
 * @member {String} pays
 */
Representant.prototype['pays'] = undefined;
/**
 * Code du pays du représentant
 * @member {String} code_pays
 */
Representant.prototype['code_pays'] = undefined;
// Implement RepresentantRechercheAllOf interface:
/**
 * Vaut vrai si le représentant est toujours à son poste.
 * @member {Boolean} actuel
 */
RepresentantRechercheAllOf.prototype['actuel'] = undefined;
/**
 * Date de départ de poste dans le cas où le représentant n'est plus un représentant actuel, au format AAAA-MM-JJ.
 * @member {String} date_depart_de_poste
 */
RepresentantRechercheAllOf.prototype['date_depart_de_poste'] = undefined;
/**
 * Forme juridique du représentant dans le cas d'une personne morale.
 * @member {String} forme_juridique
 */
RepresentantRechercheAllOf.prototype['forme_juridique'] = undefined;




export default RepresentantRecherche;

